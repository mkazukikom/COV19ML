# -*- coding: utf-8 -*-
"""xgboost_2class_strictly_cv_allfeatures_top5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17RxD0W1WRZJJGgmPu7YZvd_6_kL_4ueo
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn.manifold import TSNE
from sklearn.preprocessing import MinMaxScaler, StandardScaler, OneHotEncoder
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import accuracy_score, recall_score, precision_score, f1_score, confusion_matrix, roc_auc_score
import xgboost as xgb
from tqdm import tqdm
#import umap

np.random.seed(51)

print(xgb.__version__)

dir_name = 'data_20240126/'
aav_data = pd.read_csv(dir_name+'AAV_data_2.csv')
ad_data = pd.read_csv(dir_name+'AD_data_2.csv')
covid_data = pd.read_csv(dir_name+'COVID_data.csv')
hc_data = pd.read_csv(dir_name+'HC_data.csv')
sle_data = pd.read_csv(dir_name+'SLE_data_2.csv')
ssc_data = pd.read_csv(dir_name+'SSc_data.csv')

print(aav_data.shape, ad_data.shape, covid_data.shape,
      hc_data.shape, sle_data.shape, ssc_data.shape)

data = pd.concat([aav_data, ad_data, covid_data, hc_data, sle_data, ssc_data])
data.CLASS.value_counts()

y_covid = data.COVID
y_covid= y_covid.to_numpy()
y_all = data.CLASS.to_numpy()

X = data.drop(columns=['ID','CLASS','COVID'])
#X /= X.max(axis=0)
n_data, n_features = X.shape
feature_names = X.columns.values
n_class = len(np.unique(y_covid))
print(X.shape, len(y_covid[y_covid==0]), len(y_covid[y_covid==1]) )

print(y_covid)

n_selected_features = 5
num_round = 40
lr = 0.05
acc_list_all_tr = []
acc_list_all_te = []
auc_list_all_tr = []
auc_list_all_te = []
precision_list_all_tr = []
precision_list_all_te = []
recall_list_all_tr = []
recall_list_all_te = []
f1score_list_all_tr = []
f1score_list_all_te = []
table_list_all_tr = []
table_list_all_te = []
selected_feature_list = []
imp_list = []
n_fold = 10
X_np = X.to_numpy()
df_imp_all = pd.DataFrame({"feature_importance": np.zeros(len(feature_names))}, index=feature_names)
skf = StratifiedKFold(n_splits=n_fold, shuffle=True, random_state=0)
for (tr, te) in skf.split(X_np, y_all):   # 全クラスのデータを均一に分割
    X_tr, X_te, y_tr, y_te = X_np[tr], X_np[te], y_covid[tr], y_covid[te]
    #scaler = StandardScaler()
    #X_tr = scaler.fit_transform(X_tr)
    #X_te = scaler.transform(X_te)
    dtrain_all = xgb.DMatrix(pd.DataFrame(X_tr, columns=feature_names), label=y_tr) #, feature_names=feature_names.tolist())
    dtest_all = xgb.DMatrix(pd.DataFrame(X_te, columns=feature_names), label=y_te)
    param = {'objective': 'binary:logistic', 'nthread': 1, 'eta': lr, 'subsample': 0.25}
    param['eval_metric'] = ['error', 'auc', 'logloss'] # 最後のメトリックで評価される
    evallist_all = [(dtrain_all, 'train')] # , (dtest, 'eval')]
    bst = xgb.train(param, dtrain_all, num_round, evals=evallist_all) #, early_stopping_rounds=10)
    pred_tr = bst.predict(dtrain_all) #, iteration_range=(0, bst.best_iteration + 1))
    df_imp_each = pd.DataFrame({"feature_importance": np.zeros(len(feature_names))}, index=feature_names)
    for k, v in zip(bst.get_fscore().keys(), bst.get_fscore().values()):
        df_imp_all.at[k,"feature_importance"] += v
        df_imp_each.at[k,"feature_importance"] += v
    ### feature selection ###
    df_imp_each = df_imp_each.sort_values(by="feature_importance", ascending=False)
    # print(df_imp_each)
    selected_feature_names = df_imp_each.iloc()[:n_selected_features].index.tolist()
    f_imp = df_imp_each[df_imp_each.index==selected_feature_names[-1]].feature_importance.values[0]
    #
    selected_feature_names = df_imp_each[df_imp_each.feature_importance>=f_imp].index.tolist()
    print(len(selected_feature_names), selected_feature_names)
    imp_list.append(df_imp_each)
    #selected_feature_names = df_imp_each[:n_selected_features].index.tolist() # top5
    selected_feature_list.append(selected_feature_names)
    #print(selected_feature_names)
    X_selected_np = X[selected_feature_names].to_numpy()
    dtrain = xgb.DMatrix(pd.DataFrame(X_selected_np[tr], columns=selected_feature_names), label=y_tr) #, feature_names=feature_names.tolist())
    dtest = xgb.DMatrix(pd.DataFrame(X_selected_np[te], columns=selected_feature_names), label=y_te)
    evallist = [(dtrain, 'train')] # , (dtest, 'eval')]
    bst = xgb.train(param, dtrain, num_round, evals=evallist) #, early_stopping_rounds=10)
    pred_tr = bst.predict(dtrain) #, iteration_range=(0, bst.best_iteration + 1))
    pred_te = bst.predict(dtest) #, iteration_range=(0, bst.best_iteration + 1))
    auc_tr = roc_auc_score(y_tr, pred_tr) # .argmax(axis=1) )
    auc_te = roc_auc_score(y_te, pred_te) # .argmax(axis=1) )
    pred_tr = [0 if i<0.5 else 1 for i in pred_tr]
    pred_te = [0 if i<0.5 else 1 for i in pred_te]
    acc_tr = accuracy_score(y_tr, pred_tr) # .argmax(axis=1) )
    acc_te = accuracy_score(y_te, pred_te) # .argmax(axis=1) )
    precision_tr = precision_score(y_tr,pred_tr)
    precision_te = precision_score(y_te,pred_te)
    recall_tr = recall_score(y_tr,pred_tr)
    recall_te = recall_score(y_te,pred_te)
    f1score_tr = f1_score(y_tr,pred_tr)
    f1score_te = f1_score(y_te,pred_te)
    table_tr = confusion_matrix(y_tr, pred_tr, labels=[i for i in range(n_class)])
    table_tr = pd.DataFrame(table_tr, index=["label"+str(i) for i in range(n_class)], columns=["pred"+str(i) for i in range(n_class)]).T
    table_te = confusion_matrix(y_te, pred_te, labels=[i for i in range(n_class)])
    table_te = pd.DataFrame(table_te, index=["label"+str(i) for i in range(n_class)], columns=["pred"+str(i) for i in range(n_class)]).T
    acc_list_all_tr.append(acc_tr)
    acc_list_all_te.append(acc_te)
    auc_list_all_tr.append(auc_tr)
    auc_list_all_te.append(auc_te)
    precision_list_all_tr.append(precision_tr)
    precision_list_all_te.append(precision_te)
    recall_list_all_tr.append(recall_tr)
    recall_list_all_te.append(recall_te)
    f1score_list_all_tr.append(f1score_tr)
    f1score_list_all_te.append(f1score_te)
    table_list_all_tr.append(table_tr)
    table_list_all_te.append(table_te)
df_imp_all = df_imp_all.sort_values(by="feature_importance", ascending=False)
df_imp_all['feature_importance'] /= n_fold
print(f"tr mean: {np.mean(acc_list_all_tr)}, tr stddev: {np.std(acc_list_all_tr)}, te mean: {np.mean(acc_list_all_te)}, te stddev: {np.std(acc_list_all_te)}")

for i in range(n_fold):
    table_list_all_tr[i].index = "train_"+table_list_all_tr[i].index+"_cv"+str(i)
    table_list_all_te[i].index = "valid_"+table_list_all_te[i].index+"_cv"+str(i)
for i in range(n_fold):
    imp_list[i].columns += '_cv' +str(i)

df_all_acc = pd.DataFrame([np.mean(acc_list_all_tr), np.std(acc_list_all_tr), np.mean(acc_list_all_te), np.std(acc_list_all_te)]).T
df_all_auc = pd.DataFrame([np.mean(auc_list_all_tr), np.std(auc_list_all_tr), np.mean(auc_list_all_te), np.std(auc_list_all_te)]).T
df_all_recall = pd.DataFrame([np.mean(recall_list_all_tr), np.std(recall_list_all_tr), np.mean(recall_list_all_te), np.std(recall_list_all_te)]).T
df_all_precision = pd.DataFrame([np.mean(precision_list_all_tr), np.std(precision_list_all_tr), np.mean(precision_list_all_te), np.std(precision_list_all_te)]).T
df_all_fvalue = pd.DataFrame([np.mean(f1score_list_all_tr), np.std(f1score_list_all_tr), np.mean(f1score_list_all_te), np.std(f1score_list_all_te)]).T

df = pd.concat([df_all_acc,df_all_auc,df_all_recall,df_all_precision,df_all_fvalue], axis=0)
df.columns = ["train mean", "train stddev", "valid mean", "valid stddev"]
df.index = ["accuracy","auc","recall","precision","f1_score"]
print(df.to_markdown())

df.to_csv("top"+str(n_selected_features)+"features_xgb_performance.csv",index=False)

imp_dict = {}
for k, v in zip(df_imp_all.index, df_imp_all.feature_importance):
    if v>0:
        imp_dict[k] = v
xgb.plot_importance(imp_dict, max_num_features=10, xlabel="Feature Importance")

for i in range(n_fold):
    tmp = imp_list[i]
    tmp = tmp.sort_values(by="feature_importance_cv"+str(i), ascending=False)
    print(tmp.iloc()[:n_selected_features+5,:].to_markdown())

pd.DataFrame(selected_feature_list).to_csv("selected_features_2class.csv",index=False)

print(selected_feature_list)

tmp_imp = pd.concat(imp_list, axis=1)
tmp_imp_stat = pd.concat([tmp_imp.T.mean(), tmp_imp.T.std()],axis=1)
tmp_imp_stat.columns=["mean","std"]
tmp_imp_stat.sort_values(by="mean", ascending=False,inplace=True)
print(tmp_imp_stat.iloc()[:n_selected_features+5,:].to_markdown())

'''
top5 同一スコアは含む
eta 0.01, 100steps,
|           |   train mean |   train stddev |   valid mean |   valid stddev |
|:----------|-------------:|---------------:|-------------:|---------------:|
| accuracy  |     0.9425   |      0.01155   |     0.887315 |      0.0376745 |
| recall    |     0.80951  |      0.0472733 |     0.683929 |      0.0910714 |
| precision |     0.961709 |      0.0296927 |     0.850476 |      0.111863  |
| fvalue    |     0.877897 |      0.0272913 |     0.755128 |      0.0872074 |
eta 0.025, 100steps
|           |   train mean |   train stddev |   valid mean |   valid stddev |
|:----------|-------------:|---------------:|-------------:|---------------:|
| accuracy  |     0.965568 |      0.0103378 |     0.866256 |      0.0433707 |
| recall    |     0.900956 |      0.0332207 |     0.6875   |      0.113852  |
| precision |     0.963485 |      0.0264547 |     0.786548 |      0.135141  |
| fvalue    |     0.930634 |      0.0211321 |     0.72359  |      0.0893281 |
eta 0.05, 40 steps,
|           |   train mean |   train stddev |   valid mean |   valid stddev |
|:----------|-------------:|---------------:|-------------:|---------------:|
| accuracy  |     0.960876 |      0.0112192 |     0.887192 |      0.0309709 |
| recall    |     0.884266 |      0.0355797 |     0.7      |      0.0983927 |
| precision |     0.961078 |      0.0266181 |     0.840952 |      0.0930998 |
| fvalue    |     0.920546 |      0.0232162 |     0.758608 |      0.0722169 |
eta 0.1, 20 steps,
|           |   train mean |   train stddev |   valid mean |   valid stddev |
|:----------|-------------:|---------------:|-------------:|---------------:|
| accuracy  |     0.964393 |      0.0128019 |     0.879926 |      0.0402928 |
| recall    |     0.894965 |      0.0405979 |     0.6625   |      0.136336  |
| precision |     0.964515 |      0.0253232 |     0.839762 |      0.0613718 |
| fvalue    |     0.927897 |      0.0264501 |     0.733883 |      0.0997523 |

eta 0.05, 40 steps, subsample 0.25
|           |   train mean |   train stddev |   valid mean |   valid stddev |
|:----------|-------------:|---------------:|-------------:|---------------:|
| accuracy  |     0.919792 |      0.0111329 |     0.890517 |      0.0411317 |
| recall    |     0.729021 |      0.0257194 |     0.657143 |      0.0877729 |
| precision |     0.947665 |      0.0374018 |     0.893333 |      0.115277  |
| fvalue    |     0.823683 |      0.024511  |     0.754412 |      0.0900537 |
'''