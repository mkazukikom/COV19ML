# -*- coding: utf-8 -*-
"""xgboost_2class_plot_mcc.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P7AaQd33UMsmuVDnzfu1sOcMUsCBg1fC
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd
from sklearn.manifold import TSNE
from sklearn.preprocessing import MinMaxScaler, StandardScaler, OneHotEncoder
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import accuracy_score, recall_score, precision_score, f1_score, confusion_matrix, roc_auc_score
import xgboost as xgb
from tqdm import tqdm
#import umap

perf_df_list = [pd.read_csv("/content/drive/MyDrive/Colab Notebooks/top"+str(i)+"features_xgb_performance.csv", index_col=False) for i in range(1,6)]
#perf_df_list += [pd.read_csv("top"+str(i)+"features_xgb_performance_auc.csv", index_col=False) for i in range(5,6)]
perf_df_list.append( pd.read_csv("/content/drive/MyDrive/Colab Notebooks/allfeatures_xgb_performance_auc.csv", index_col=False) )

perf_df_list

for df_i in perf_df_list:
    df_i.index=["Accuracy","ROC-AUC","Recall","Precision","F1_score","MCC"]

df_valid_mean = pd.concat( [df['valid_mean'] for df in perf_df_list], axis=1 )
df_valid_mean.columns = ["top"+str(i) for i in range(1,6)]+["all"] # ["top"+str(i)+"features" for i in range(1,6)]+["allfeatures"]
df_valid_mean

df_valid_stddev = pd.concat( [df['valid_stddev'] for df in perf_df_list], axis=1 )
df_valid_stddev.columns = ["top"+str(i) for i in range(1,6)]+["all"] # ["top"+str(i)+"features" for i in range(1,6)]+["allfeatures"]
df_valid_stddev

sns.set_style("whitegrid", {'grid.linestyle': '--'})
ax = sns.lineplot(data=df_valid_mean.T)
sns.move_legend(ax, "upper left", bbox_to_anchor=(1, 1))
plt.savefig("result_xgboost.png", bbox_inches='tight')

import matplotlib.pyplot as plt
import seaborn as sns

# ▼ フォントを Helvetica に統一
plt.rcParams['font.family'] = 'Helvetica'

# ▼ 背景のスタイルを指定
sns.set_style("whitegrid", {'grid.linestyle': '--'})

# 例として df_valid_mean と df_valid_stddev が以下のような形だとします:
# df_valid_mean: 各行が異なる指標やアルゴリズム、各列がエポック/ステップなど
# df_valid_stddev: 同じ行・列インデックスで標準偏差の数値
# ここでは転置して plot するので、列を x 軸、行を系列として描画

# Seaborn の lineplot で「平均値」の折れ線を先に描く
ax = sns.lineplot(data=df_valid_mean.T, marker='o', dashes=False)

# 続いて Matplotlib の errorbar を使ってエラーバーを重ねる
# lineplot では系列(行)ごとに折れ線が生成されるので、それらに対応させる形でループ
#for idx in df_valid_mean.T.index:
    # idx は df_valid_mean.T の行名 (＝ df_valid_mean の列名)
    # x 座標は df_valid_mean.T.columns
    # y 座標は df_valid_mean.T.loc[idx]
    # yerr (誤差) は df_valid_stddev.T.loc[idx] を使用
#    ax.errorbar(
#        x=df_valid_mean.T.columns,
#        y=df_valid_mean.T.loc[idx],
#        yerr=df_valid_stddev.T.loc[idx],
#        fmt='none',     # マーカーや折れ線は描かず、エラーバーのみ
#        capsize=3,      # エラーバーの先端の横棒の長さ
#        color=ax.lines[list(df_valid_mean.T.index).index(idx)].get_color()
        # ↑ Seaborn で描画された該当ラインと同じ色を取得
#    )

# 凡例を画像の外枠に移動
sns.move_legend(ax, "upper left", bbox_to_anchor=(1, 1))

# 画像を保存
plt.savefig("result_xgboost.png", bbox_inches='tight')
plt.show()