# -*- coding: utf-8 -*-
"""xgboost_7class_allfeatures_mcc.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10nwa0dpO3g73cfAJwbCSHOW0RcphHLvA
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn.manifold import TSNE
from sklearn.preprocessing import MinMaxScaler, StandardScaler, OneHotEncoder
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import accuracy_score, log_loss, mean_squared_error, confusion_matrix
from sklearn.metrics import recall_score, precision_score, f1_score, matthews_corrcoef
import xgboost as xgb
from tqdm import tqdm
#import umap

np.random.seed(51)

dir_name = '/content/drive/MyDrive/COV19ML_share/data_20250201/'
aav_data = pd.read_csv(dir_name+'AAV_data_3.csv')
ad_data = pd.read_csv(dir_name+'AD_data_3.csv')
covid_data = pd.read_csv(dir_name+'COVID_data_3.csv')
hc_data = pd.read_csv(dir_name+'HC_data_3.csv')
sle_data = pd.read_csv(dir_name+'SLE_data_3.csv')
ssc_data = pd.read_csv(dir_name+'SSc_data_3.csv')

print(aav_data.shape, ad_data.shape, covid_data.shape,
      hc_data.shape, sle_data.shape, ssc_data.shape)

data = pd.concat([aav_data, ad_data, covid_data, hc_data, sle_data, ssc_data])
data.CLASS.value_counts()

# prompt: in the column sex, change F to 1 and M to 0.

# Assuming 'data' DataFrame is already loaded as shown in the provided code.

# Replace 'F' with 1 and 'M' with 0 in the 'sex' column.
data['sex'] = data['sex'].replace({'F': 1, 'M': 0})

X = data.drop(columns=['ID','sex','age','CLASS','COVID'])
#X /= X.max(axis=0)
n_data, n_features = X.shape
feature_names = X.columns.values

y_all = data.CLASS.to_numpy()
for i in range(len(y_all)):
    if y_all[i]=='COVID_moderate' or y_all[i]=='COVID_severe':
        y_all[i] = 'COVID_moderate_or_severe'

n_class = len(np.unique(y_all))
enc = OneHotEncoder().fit(y_all.reshape(-1,1))
y_all = enc.transform(y_all.reshape(-1,1)).toarray().astype(int)
y_all = y_all.argmax(axis=1)

print(y_all)

#n_selected_features = 5
num_round = 40
lr = 0.05
acc_list_all_tr = []
acc_list_all_te = []
precision_list_all_tr = []
precision_list_all_te = []
recall_list_all_tr = []
recall_list_all_te = []
f1score_list_all_tr = []
f1score_list_all_te = []
mcc_list_all_tr = []
mcc_list_all_te = []
table_list_all_tr = []
table_list_all_te = []
selected_feature_list = []
imp_list = []
n_fold = 10
X_np = X.to_numpy()
df_imp_all = pd.DataFrame({"feature_importance": np.zeros(len(feature_names))}, index=feature_names)
skf = StratifiedKFold(n_splits=n_fold, shuffle=True, random_state=0)
for (tr, te) in skf.split(X_np, y_all):   # 全クラスのデータを均一に分割
    X_tr, X_te, y_tr, y_te = X_np[tr], X_np[te], y_all[tr], y_all[te]
    # scaler = StandardScaler()
    # X_tr = scaler.fit_transform(X_tr)
    # X_te = scaler.transform(X_te)
    dtrain_all = xgb.DMatrix(pd.DataFrame(X_tr, columns=feature_names), label=y_tr) #, feature_names=feature_names.tolist())
    dtest_all = xgb.DMatrix(pd.DataFrame(X_te, columns=feature_names), label=y_te)
    param = {'objective': 'multi:softprob', 'nthread': 1, 'num_class': len(np.unique(y_all)), 'eta': lr, 'subsample': 0.5}
    param['eval_metric'] = ['merror', 'mlogloss']
    evallist_all = [(dtrain_all, 'train')] # , (dtest, 'eval')]
    bst = xgb.train(param, dtrain_all, num_round, evallist_all) #, early_stopping_rounds=10)
    pred_tr = bst.predict(dtrain_all) #, iteration_range=(0, bst.best_iteration + 1))
    df_imp_each = pd.DataFrame({"feature_importance": np.zeros(len(feature_names))}, index=feature_names)
    for k, v in zip(bst.get_fscore().keys(), bst.get_fscore().values()):
        df_imp_all.at[k,"feature_importance"] += v
        df_imp_each.at[k,"feature_importance"] += v
    ### feature selection ###
    df_imp_each = df_imp_each.sort_values(by="feature_importance", ascending=False)
    imp_list.append(df_imp_each)
    #
    pred_te = bst.predict(dtest_all) #, iteration_range=(0, bst.best_iteration + 1))
    ###
    pred_tr = pred_tr.argmax(axis=1)
    pred_te = pred_te.argmax(axis=1)
    acc_tr = accuracy_score(y_tr, pred_tr) # .argmax(axis=1) )
    acc_te = accuracy_score(y_te, pred_te) # .argmax(axis=1) )
    precision_tr = precision_score(y_tr,pred_tr,average='macro')
    precision_te = precision_score(y_te,pred_te,average='macro')
    recall_tr = recall_score(y_tr,pred_tr,average='macro')
    recall_te = recall_score(y_te,pred_te,average='macro')
    f1score_tr = f1_score(y_tr,pred_tr,average='macro')
    f1score_te = f1_score(y_te,pred_te,average='macro')
    mcc_tr = matthews_corrcoef(y_tr, pred_tr)
    mcc_te = matthews_corrcoef(y_te, pred_te)
    table_tr = confusion_matrix(y_tr, pred_tr, labels=[i for i in range(n_class)])
    table_tr = pd.DataFrame(table_tr, index=["label"+str(i) for i in range(n_class)], columns=["pred"+str(i) for i in range(n_class)]).T
    table_te = confusion_matrix(y_te, pred_te, labels=[i for i in range(n_class)])
    table_te = pd.DataFrame(table_te, index=["label"+str(i) for i in range(n_class)], columns=["pred"+str(i) for i in range(n_class)]).T
    acc_list_all_tr.append(acc_tr)
    acc_list_all_te.append(acc_te)
    precision_list_all_tr.append(precision_tr)
    precision_list_all_te.append(precision_te)
    recall_list_all_tr.append(recall_tr)
    recall_list_all_te.append(recall_te)
    f1score_list_all_tr.append(f1score_tr)
    f1score_list_all_te.append(f1score_te)
    mcc_list_all_tr.append(mcc_tr)
    mcc_list_all_te.append(mcc_te)
    table_list_all_tr.append(table_tr)
    table_list_all_te.append(table_te)
df_imp_all = df_imp_all.sort_values(by="feature_importance", ascending=False)
df_imp_all['feature_importance'] /= n_fold
print(f"tr mean: {np.mean(acc_list_all_tr)}, tr stddev: {np.std(acc_list_all_tr)}, te mean: {np.mean(acc_list_all_te)}, te stddev: {np.std(acc_list_all_te)}")

for i in range(n_fold):
    table_list_all_tr[i].index = "train_"+table_list_all_tr[i].index+"_cv"+str(i)
    table_list_all_te[i].index = "valid_"+table_list_all_te[i].index+"_cv"+str(i)

# label 1 is positive

for i in range(n_fold):
    print(table_list_all_tr[i].to_markdown())
    print(f'acc:{acc_list_all_tr[i]:.5f}, recall:{recall_list_all_tr[i]:.5f}, precision:{precision_list_all_tr[i]:.5f}, fvalue:{f1score_list_all_tr[i]:.5f}, mcc:{mcc_list_all_te[i]:.5f}')

for i in range(n_fold):
    print(table_list_all_te[i].to_markdown())
    print(f'acc:{acc_list_all_te[i]:.5f}, recall:{recall_list_all_te[i]:.5f}, precision:{precision_list_all_te[i]:.5f}, fvalue:{f1score_list_all_te[i]:.5f}, mcc:{mcc_list_all_te[i]:.5f}')

df_all_acc = pd.DataFrame([np.mean(acc_list_all_tr), np.std(acc_list_all_tr), np.mean(acc_list_all_te), np.std(acc_list_all_te)]).T
df_all_recall = pd.DataFrame([np.mean(recall_list_all_tr), np.std(recall_list_all_tr), np.mean(recall_list_all_te), np.std(recall_list_all_te)]).T
df_all_precision = pd.DataFrame([np.mean(precision_list_all_tr), np.std(precision_list_all_tr), np.mean(precision_list_all_te), np.std(precision_list_all_te)]).T
df_all_fvalue = pd.DataFrame([np.mean(f1score_list_all_tr), np.std(f1score_list_all_tr), np.mean(f1score_list_all_te), np.std(f1score_list_all_te)]).T
df_all_mcc = pd.DataFrame([np.mean(mcc_list_all_tr), np.std(mcc_list_all_tr), np.mean(mcc_list_all_te), np.std(mcc_list_all_te)]).T

df = pd.concat([df_all_acc,df_all_recall,df_all_precision,df_all_fvalue,df_all_mcc], axis=0)
df.columns = ["train mean", "train stddev", "valid mean", "valid stddev"]
df.index = ["accuracy","recall","precision","fvalue","mcc"]
print(df.to_markdown())

tmp_imp = pd.concat(imp_list, axis=1)
tmp_imp_stat = pd.concat([tmp_imp.T.mean(), tmp_imp.T.std()],axis=1)
tmp_imp_stat.columns=["mean","std"]
tmp_imp_stat.sort_values(by="mean", ascending=False,inplace=True)
tmp_imp_stat.to_csv("xgboost_2class_feature_importance.csv", index=True)
print(tmp_imp_stat.iloc()[:30,:].to_markdown())

imp_dict = {}
for k, v in zip(df_imp_all.index, df_imp_all.feature_importance):
    if v>0:
        imp_dict[k] = v
xgb.plot_importance(imp_dict, xlabel="feature importance", max_num_features=10)

'''
全特徴量を使用
eta 0.05, 40 steps, subsample 1
|           |   train mean |   train stddev |   valid mean |   valid stddev |
|:----------|-------------:|---------------:|-------------:|---------------:|
| accuracy  |            1 |              0 |     0.894335 |      0.0387209 |
| recall    |            1 |              0 |     0.6875   |      0.113852  |
| precision |            1 |              0 |     0.88381  |      0.101289  |
| fvalue    |            1 |              0 |     0.76685  |      0.0898745 |
eta 0.05, 40 steps, subsample 0.5
|           |   train mean |   train stddev |   valid mean |   valid stddev |
|:----------|-------------:|---------------:|-------------:|---------------:|
| accuracy  |     0.953441 |     0.00411421 |     0.879803 |      0.0436982 |
| recall    |     0.820443 |     0.0157807  |     0.644643 |      0.0605302 |
| precision |     0.998182 |     0.00545455 |     0.875238 |      0.14325   |
| fvalue    |     0.900527 |     0.00937044 |     0.737562 |      0.0775335 |
eta 0.05, 40 steps, subsample 0.25
|           |   train mean |   train stddev |   valid mean |   valid stddev |
|:----------|-------------:|---------------:|-------------:|---------------:|
| accuracy  |     0.926847 |     0.00967396 |     0.862192 |      0.0415499 |
| recall    |     0.724359 |     0.0313657  |     0.5375   |      0.118572  |
| precision |     0.98721  |     0.0144333  |     0.906667 |      0.12      |
| fvalue    |     0.83537  |     0.0250781  |     0.662121 |      0.112362  |
eta 0.05, 40 steps, subsample 0.125
|           |   train mean |   train stddev |   valid mean |   valid stddev |
|:----------|-------------:|---------------:|-------------:|---------------:|
| accuracy  |     0.806319 |      0.0214668 |     0.774754 |      0.0449312 |
| recall    |     0.247972 |      0.0832955 |     0.125    |      0.162097  |
| precision |     0.993333 |      0.02      |     0.5      |      0.5       |
| fvalue    |     0.389772 |      0.107943  |     0.189444 |      0.228555  |
'''